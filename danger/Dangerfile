# frozen_string_literal: true

# Make it more obvious that a PR is a work in progress and shouldn't be merged yet
warn("PR is classed as Work in Progress") if github.pr_title.include? "WIP"

# Warn when there is a big PR
warn("Big PR") if git.lines_of_code > 500

# Don't let testing shortcuts get into main by accident
raise("fdescribe left in tests") if `grep -r fdescribe spec/ `.length > 1
raise("fit left in tests") if `grep -r fit spec/ `.length > 1

# Ensure a clean commit history
raise("Please squash fixup! commits before merging") if git.commits.any? { |c| c.message =~ /^fixup!/ }

# Check for proper conventional commit format
if github.pr_title !~ /^(feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.+\))?: .+/
  warn("PR title doesn't follow conventional commit format. Please use format: 'type(scope): description'")
end

# Ensure description is present for non-trivial changes
if github.pr_body.length < 10 && git.lines_of_code > 20
  warn("Please provide a more detailed PR description for changes of this size")
end

# Check if package files have been updated
package_updated = git.modified_files.include?("attio.gemspec") || git.modified_files.include?("Gemfile")
message("üì¶ Package files have been updated") if package_updated

# Encourage changelog updates for non-trivial changes
has_app_changes = git.modified_files.any? { |file| file.start_with?("lib/") }
has_changelog_changes = git.modified_files.include?("CHANGELOG.md")

if has_app_changes && !has_changelog_changes && github.pr_title !~ /^(chore|ci|docs|style|test):/
  # Skip for certain PR types
  warn("Consider updating CHANGELOG.md for this change")
end

# Check for TODO comments in the diff
git.diff.each do |file|
  file.patch.lines.each_with_index do |line, index|
    warn("TODO comment added", file: file.path, line: index + 1) if line.start_with?("+") && line.include?("TODO")
  end
end

# Encourage tests for new features
has_new_features = git.diff.any? { |file| file.patch.include?("+def ") && file.path.start_with?("lib/") }
has_test_changes = git.modified_files.any? { |file| file.start_with?("spec/") }

warn("New features should include tests") if has_new_features && !has_test_changes

# Check for debugging code
debugging_patterns = [
  "binding.pry",
  "debugger",
  "puts",
  "p ",
  "pp ",
  "console.log",
]

git.diff.each do |file|
  debugging_patterns.each do |pattern|
    if file.patch.include?("+") && file.patch.include?(pattern)
      raise("Debugging code found: #{pattern} in #{file.path}")
    end
  end
end

# Encourage documentation for public API changes
public_api_changes = git.diff.any? do |file|
  file.path.start_with?("lib/") &&
    file.patch.include?("+  def ") &&
    !file.patch.include?("+  def self.") # Skip private class methods
end

message("üìù Public API changes detected. Consider updating documentation.") if public_api_changes

# Check for secrets or sensitive information
sensitive_patterns = [
  /api[_-]?key/i,
  /secret/i,
  /password/i,
  /token/i,
  /auth/i,
]

git.diff.each do |file|
  file.patch.lines.each_with_index do |line, index|
    next unless line.start_with?("+")

    sensitive_patterns.each do |pattern|
      if line.match?(pattern) && !line.include?("# ") # Not a comment
        warn("Potential sensitive information detected", file: file.path, line: index + 1)
      end
    end
  end
end

# Performance reminders for certain file types
performance_sensitive_files = git.modified_files.select { |file| file.include?("client") || file.include?("http") }
if performance_sensitive_files.any?
  message("‚ö° Performance-sensitive files modified. Consider impact on API call efficiency.")
end

# Remind about version bumping for releases
if git.modified_files.include?("lib/attio/version.rb")
  message("üîñ Version file updated. Don't forget to update CHANGELOG.md and create a release tag.")
end
